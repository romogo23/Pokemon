@model Pokemon.Models.Pokemon_Trainer

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

<div class="row">
    <div class="col-md-8">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>PokemonTrainer</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Region, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Region, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Region, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>

            @*<div class="form-group">
                <label class="control-label col-md-2">Select at leat 1 Pokemon:</label>
                <div class="col-md-10">
                    <!--form-control-->
                    <div class="btn-group-vertical" id="listOfPokes">
                        @foreach (var item in Pokemon.Controllers.CatchedPokemonController.ListOfPokemon())
                        {
                            @Html.CheckBox("pokemonC", @item);
                            <img src="@item.Image_Url" width="50px" height="50px" alt="imgf" /> @item.Name.ToUpper()

                            <br />
                        }
                    </div>
                </div>
            </div>*@

            @*<input type="checkbox" name="pokemon" value="@item"> <img src="@item.Image_Url" width="50px" height="50px" alt="imgf" /> @item.Name.ToUpper()*@

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
        }

        <div>
            @Html.ActionLink("Back to List", "Index")
        </div>
    </div>

    <div class="col-md-4" style="text-align:center; padding-top:50px;">
        <img src="@Url.Content("~/Images/6.gif")" width="500px" height="300px" alt="team" />
    </div>

</div>

@*@section Scripts {
        @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    }
        VER COMO HACER ESTO EN .NET FRAMEWORK PARA LOS ERRORES EN TIEMPO REAL
*@
